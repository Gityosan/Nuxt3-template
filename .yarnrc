shamefully-hoist=true
strict-peer-dependencies=false

# 1. **`yarnPath`**: この設定はYarnのバージョンをプロジェクト固有に固定するために使用されます。プロジェクトディレクトリ内の特定のYarn実行可能ファイルのパスを指定します。
# 2. **`nodeLinker`**: 使用するノードリンカーを設定します。`pnp`（Plug'n'Play）または`node-modules`を選択でき、それぞれが依存関係のインストール方法を異なる方式で処理します。
# 3. **`enableGlobalCache`**: `true`に設定すると、Yarnはグローバルキャッシュを使用して、依存関係をプロジェクト間で共有します。これはディスクスペースを節約し、インストール速度を向上させることができます。
# 4. **`compressionLevel`**: キャッシュされるパッケージの圧縮レベルを設定します。数値が高いほどより強い圧縮が行われますが、圧縮と解凍によりCPU時間が増加します。
# 5. **`virtualFolder`**: 仮想パッケージを配置するディレクトリの名前を設定します。Plug'n'Playを使用している場合に関連します。
# 6. **`npmRegistryServer`**: 使用するnpmレジストリのURLを設定します。デフォルトは`https://registry.npmjs.org/`ですが、プライベートレジストリやミラーを使用する場合に変更できます。
# 7. **`npmAuthToken`**, **`npmAlwaysAuth`**, **`npmScopes`**: npmレジストリへの認証に関する設定です。プライベートパッケージのインストールや企業内部での使用に必要です。
# 8. **`ignoreCpu`**, **`ignoreEngines`**, **`ignorePlatform`**: これらの設定は、パッケージの依存関係解決時に特定のチェック（CPUアーキテクチャ、エンジンバージョン、プラットフォーム）を無視するかどうかを制御します。
# 9. **`packageExtensions`**: 特定のパッケージの依存関係をカスタマイズするために使用します。パッケージのバージョンを指定し、追加または上書きする依存関係を定義できます。
# 10. **`cacheFolder`**: Yarnが依存関係のキャッシュを保存するディレクトリのパスを設定します。
# 11. **`pnpDataPath`**: Plug'n'Playが使用するデータディレクトリのパスを設定します。  
# 12. **`pnpUnpluggedFolder`**: Plug'n'Playが使用するアンプラグドディレクトリのパスを設定します。
# 13. **`pnpVirtualFolder`**: Plug'n'Playが使用する仮想ディレクトリのパスを設定します。
# 14. **`pnpFallbackMode`**: Plug'n'Playが使用するフォールバックモードを設定します。
# 15. **`pnpEnableInlining`**: Plug'n'Playが使用するインラインモードを設定します。
# 16. **`pnpEnableLinking`**: Plug'n'Playが使用するリンクモードを設定します。
# 17. **`pnpUnpluggedPattern`**: Plug'n'Playが使用するアンプラグドパターンを設定します。
# 18. **`pnpShebang`**: Plug'n'Playが使用するシバンを設定します。
# 19. **`pnpIgnorePattern`**: Plug'n'Playが使用する無視パターンを設定します。
# 20. **`pnpIgnoreDepth`**: Plug'n'Playが使用する無視深度を設定します。
# 21. **`pnpIgnoreBuiltin`**: Plug'n'Playが使用する無視ビルトインを設定します。
# 22. **`pnpIgnoreRelative`**: Plug'n'Playが使用する無視相対を設定します。
# 23. **`shamefully-hoist`**: この設定は、依存関係のホイストを無効にするために使用されます。`true`に設定すると、Yarnは依存関係をホイストせずにインストールします。PnPは、node_modulesフォルダの代わりに、プロジェクトの依存関係を効率的に解決し、インストールする新しい方式です。しかし、一部のツールやパッケージは従来のnode_modules構造を前提としているため、PnPに完全に対応していない場合があります。
# 24. **`strict-peer-dependencies`**: 依存関係の解決において、npmやYarnはpeerDependencies（ピア依存関係）を特別な方法で扱います。これは、パッケージが動作するために必要だが、直接インストールされるべきではない依存関係を指定するために使用されます。peerDependenciesは、特にプラグインやモジュールが他のライブラリと密接に連携する必要がある場合に重要です。